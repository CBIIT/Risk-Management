<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="INSERT_OR_UPDATE">
        <name>RiskMgmtRisk</name>
        <script><![CDATA[function RiskMgmtRisk($http){
	this.getByCriteria = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/getRisksByCriteria',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.getById = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/getRiskById',
				 method : "GET",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 params: {id: params.sys_id}
			}).then(resolve, reject);
		});
	};
	this.load = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/loadRisks',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.update = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/updateRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.create = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/createRisks',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.deleteRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/deleteRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.submitRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/submitRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.submitRisk2RC = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/submitRisk2RC',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.RMApproveRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/RMApproveRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.RMRejectRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/RMRejectRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.RCApproveRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/RCApproveRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	/*
	this.RCRejectRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/RCRejectRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	*/
	this.lockRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/lockRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
	this.unlockRisk = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_naci_risk_manage/riskmgmtrestapi/unlockRisk',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>yuw5@nih.gov</sys_created_by>
        <sys_created_on>2019-01-03 21:42:24</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>afb272d5db76af40b86770c08c9619f8</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>RiskMgmtRisk</sys_name>
        <sys_package display_value="Risk Management" source="x_naci_risk_manage">76bb7febdb82a70054d8ff621f961905</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Risk Management">76bb7febdb82a70054d8ff621f961905</sys_scope>
        <sys_update_name>sp_angular_provider_afb272d5db76af40b86770c08c9619f8</sys_update_name>
        <sys_updated_by>georgejc@nih.gov</sys_updated_by>
        <sys_updated_on>2020-02-27 17:42:30</sys_updated_on>
        <type>service</type>
    </sp_angular_provider>
</record_update>
