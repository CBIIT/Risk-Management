<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>createRisks</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	var fiscalYear = request.body.data.fiscalYear;
	var sharedRisk = request.body.data.sharedRisk;
	var docs = request.body.data.docs.split(',');
	var managers = request.body.data.manager_names.split('|');
	var manager_ids = request.body.data.manager_ids.split('|');
	var pocs = request.body.data.poc_names.split(',');
	var poc_ids = request.body.data.poc_ids.split(',');
	var title = request.body.data.title;
	var section_1 = request.body.data.section_1;
	var policies = request.body.data.policies;
	var activities = request.body.data.activities;
	var plan = request.body.data.plan;
	var section_2 = request.body.data.section_2;
	var section_3 = request.body.data.section_3;
	var section_4 = request.body.data.section_4;
	var score = request.body.data.score;
	var au_recommend = request.body.data.au_recommend;
	var ompc_recommend = request.body.data.ompc_recommend;
	var eo_final_decision = request.body.data.eo_final_decision;
	var section_6 = request.body.data.section_6;
	var isPOC = request.body.data.isPOC; // 1- Yes, 0 - No
	var notify = request.body.data.notify;
	
	var gr = new GlideRecord('x_naci_risk_manage_risk_management');
	if(sharedRisk){
		// save as one risk
		gr.initialize();
		//gr.doc = docs.join(",");
		gr.doc = "Shared";
		gr.title = title;
		gr.manager_name = "Shared";
		gr.manager_id = "Shared";
		gr.poc_name = "Shared";
		gr.poc_id = "Shared";
		//Risk Team Member
		gr.risk_team_member_id = "Shared";
		gr.risk_team_member_name = "Shared";
		gr.fiscal_year = fiscalYear;
		gr.section_1 =  JSON.stringify(section_1);
		gr.primary_policies = policies;
		gr.risk_management_activities = activities;
		gr.action_plan = plan;
		gr.section_2 = JSON.stringify(section_2);
		gr.section_3 = JSON.stringify(section_3);
		gr.section_4 = JSON.stringify(section_4);
		gr.score = score;
		gr.au_recommend = au_recommend;
		gr.ompc_recommend = ompc_recommend;
		gr.eo_final_decision = eo_final_decision;
		gr.section_6 = JSON.stringify(section_6);
		gr.start_by_poc = 0;
		gr.risk_type = "shared";
		gr.insert();
	}
	else{
		var rts = {};
		var rt = new GlideRecord('x_naci_risk_manage_pocs');
		rt.addQuery('doc','IN',docs);
		rt.query();
		while(rt.next()){
			if(rt.rt_id.toString() !== ''){
				rts[rt.doc] = {rt_id:rt.rt_id.split(',')[0],
						  rt_name:rt.rt_name.split(',')[0] };
			}
			else{
				rts[rt.doc] = {rt_id:'57d8408d6f098e001c857eeeae3ee459',
						  rt_name: 'Elena Kusterer'};
			}
		}
		for(var i = 0; i < docs.length; i++){
			gr.initialize();
			gr.doc = docs[i];
			gr.title = title;
			gr.manager_name = managers[i];
			gr.manager_id = manager_ids[i];
			gr.poc_name = pocs[i];
			gr.poc_id = poc_ids[i];
			//Risk Team Member
			gr.risk_team_member_id = rts[docs[i]].rt_id;
			gr.risk_team_member_name = rts[docs[i]].rt_name;
			gr.fiscal_year = fiscalYear;
			gr.section_1 =  JSON.stringify(section_1);
			gr.primary_policies = policies;
			gr.risk_management_activities = activities;
			gr.action_plan = plan;
			gr.section_2 = JSON.stringify(section_2);
			gr.section_3 = JSON.stringify(section_3);
			gr.section_4 = JSON.stringify(section_4);
			gr.score = score;
			gr.au_recommend = au_recommend;
			gr.ompc_recommend = ompc_recommend;
			gr.eo_final_decision = eo_final_decision;
			gr.section_6 = JSON.stringify(section_6);
			gr.start_by_poc = isPOC;
			gr.risk_type = "new";
			gr.insert();
			
			if(notify && notify == "1"){
				if(isPOC == "1"){
					var rt_name = gr.getDisplayValue('risk_team_member_name');
					var rt_email = "";
					var user_item = new GlideRecord('sys_user');
					user_item.addQuery('sys_id', gr.getDisplayValue('risk_team_member_id'));
					user_item.query();
					while(user_item.next()){
						rt_email += user_item.getDisplayValue('email') + ",";
					}
					gs.eventQueue('x_naci_risk_manage.notify_rt_create',gr, rt_name, rt_email);
				}
				else{
					var email_content = request.body.data.email_content;
					if(!email_content || email_content.trim() == ""){
						email_content = "-";
					}
					var poc_name = gr.getDisplayValue('poc_name');
					var poc_email = "";
					var user_item = new GlideRecord('sys_user');
					user_item.addQuery('sys_id', gr.getDisplayValue('poc_id'));
					user_item.query();
					while(user_item.next()){
						poc_email += user_item.getDisplayValue('email') + ",";
					}
					gs.eventQueue('x_naci_risk_manage.notify_poc_create',gr, email_content, poc_email);
				}
			}
		}
	}
	
	
	return docs.length;

})(request, response);]]></operation_script>
        <operation_uri>/api/x_naci_risk_manage/riskmgmtrestapi/createRisks</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/createRisks</relative_path>
        <request_example/>
        <requires_acl_authorization>false</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>yuw5@nih.gov</sys_created_by>
        <sys_created_on>2019-01-03 22:23:25</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3b697a1ddb76af40b86770c08c96196e</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>createRisks</sys_name>
        <sys_package display_value="Risk Management" source="x_naci_risk_manage">76bb7febdb82a70054d8ff621f961905</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Risk Management">76bb7febdb82a70054d8ff621f961905</sys_scope>
        <sys_update_name>sys_ws_operation_3b697a1ddb76af40b86770c08c96196e</sys_update_name>
        <sys_updated_by>georgejc@nih.gov</sys_updated_by>
        <sys_updated_on>2020-03-07 15:12:34</sys_updated_on>
        <web_service_definition display_value="riskmgmtRestAPI">f1537d81dbb66f40b86770c08c9619ee</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
